# -*- coding: utf-8 -*-
import streamlit as st
import os
from dotenv import load_dotenv
from google import genai
from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import Google_Search
from google.genai import types as genai_types # Renomeado para evitar conflito com tipos do streamlit
from datetime import date
import textwrap
import warnings

warnings.filterwarnings("ignore")

# Carregar vari√°veis de ambiente do arquivo .env
load_dotenv()

# Constante para o ID do Modelo
MODEL_ID = "gemini-2.0-flash" # Ou o modelo que voc√™ preferir e tiver acesso

# --- Configura√ß√£o da API Key e Cliente Gemini ---
def configure_google_api():
    """Configura a API Key do Google e o cliente Gemini."""
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        st.error("Chave de API do Google (GOOGLE_API_KEY) n√£o encontrada no arquivo .env.")
        st.stop()
    try:
        os.environ["GOOGLE_API_KEY"] = api_key # ADK pode precisar disso no ambiente
        genai.configure(api_key=api_key)
        client = genai.Client() # Inicializa o cliente globalmente se necess√°rio, ou passa para agentes
        return client
    except Exception as e:
        st.error(f"Erro ao configurar o cliente Gemini: {e}")
        st.stop()

# --- Fun√ß√µes Auxiliares (Adaptadas do original) ---
def call_agent(agent: Agent, message_text: str, agent_name_for_session: str) -> str:
    """
    Envia uma mensagem para um agente via Runner e retorna a resposta final.
    Usa nomes de sess√£o √∫nicos para evitar conflitos no InMemorySessionService.
    """
    session_service = InMemorySessionService()
    # Usar um ID de sess√£o √∫nico baseado no nome do agente e um timestamp simples ou contador
    # para evitar colis√µes se a mesma sess√£o for recriada rapidamente.
    session_id = f"session_{agent_name_for_session}_{os.urandom(4).hex()}"
    session = session_service.create_session(
        app_name=agent.name, # Ou um nome de app mais geral
        user_id="streamlit_user",
        session_id=session_id
    )
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    content = genai_types.Content(role="user", parts=[genai_types.Part(text=message_text)])

    final_response = ""
    try:
        for event in runner.run(user_id="streamlit_user", session_id=session_id, new_message=content):
            if event.is_final_response():
                for part in event.content.parts:
                    if part.text is not None:
                        final_response += part.text
                        final_response += "\n"
    except Exception as e:
        st.error(f"Erro durante a execu√ß√£o do agente {agent.name}: {e}")
        return f"Erro ao processar com {agent.name}. Por favor, verifique os logs ou a configura√ß√£o da API."
    return final_response

# N√£o √© mais estritamente necess√°rio com st.markdown, mas pode ser √∫til para pr√©-processamento.
def to_markdown_custom(text):
  text = text.replace('‚Ä¢', '  *') # Adapta marcadores para Markdown
  # Adicionar mais substitui√ß√µes se necess√°rio
  return textwrap.indent(text, '> ', predicate=lambda _: True)


# --- Defini√ß√µes dos Agentes ---

# Agente 1: Buscador de Laudos Periciais
def criar_agente_buscador():
    return Agent(
        name="agente_buscador_streamlit", # Nome √∫nico para o agente
        model=MODEL_ID,
        instruction="""
        Voc√™ √© um Assistente de Pesquisa T√©cnica e Desenvolvedor de Laudos Periciais na √°rea de Engenharia Civil.
        Sua tarefa √© utilizar mecanismos de busca (como o Google Search) para localizar decis√µes recentes do Tribunal de Justi√ßa que envolvam laudos periciais aprovados ou rejeitados relacionados ao tema indicado.
        Priorize at√© 5 exemplos relevantes de cada tipo (laudos aceitos e laudos rejeitados), com base na quantidade e qualidade das informa√ß√µes dispon√≠veis sobre cada caso.
        Desconsidere laudos com pouca repercuss√£o ou escassa fundamenta√ß√£o t√©cnica/jur√≠dica publicada, mesmo que tenham sido mencionados em alguma decis√£o. Substitua-os por casos com maior documenta√ß√£o p√∫blica.
        As decis√µes e laudos analisados devem ser atuais, com data de emiss√£o ou julgamento de no m√°ximo 5 anos da data fornecida.
        A finalidade √© identificar padr√µes t√©cnicos, erros recorrentes e boas pr√°ticas que contribuam para a elabora√ß√£o de laudos mais robustos e alinhados com as exig√™ncias dos Tribunais.
        """,
        description="Agente que busca informa√ß√µes no Google para laudos periciais.",
        tools=[Google Search]
    )

# Agente 2: Planejador de Laudos Periciais
def criar_agente_planejador():
    return Agent(
        name="agente_planejador_streamlit",
        model=MODEL_ID,
        instruction="""
        Voc√™ √© um planejador de laudos periciais, um perito especialista em periciais e normas relacionadas. Com base na lista de laudos mais recentes e relevantes fornecida pelo buscador, voc√™ deve:
        1. Usar a ferramenta de busca do Google (Google Search) para encontrar informa√ß√µes adicionais sobre o tema espec√≠fico do laudo, se necess√°rio, para aprofundar o entendimento.
        2. Identificar e declarar quem provavelmente solicitou o laudo (por exemplo, o juiz em um processo judicial, uma das partes interessadas, uma empresa para fins internos) e o objetivo principal do laudo (ex: avalia√ß√£o de im√≥vel para partilha de bens, verifica√ß√£o de v√≠cios construtivos, determina√ß√£o de valor de mercado para venda, etc.).
        3. Descrever as caracter√≠sticas essenciais do tipo de im√≥vel ou situa√ß√£o que seria objeto do laudo (ex: para um im√≥vel residencial: tamanho do lote, √°rea constru√≠da, n√∫mero de c√¥modos, estado de conserva√ß√£o geral; para um v√≠cio construtivo: tipo de problema, localiza√ß√£o, extens√£o aparente).
        4. Sugerir um m√©todo t√©cnico de avalia√ß√£o ou an√°lise apropriado para o tema (ex: M√©todo Comparativo Direto de Dados de Mercado, M√©todo Evolutivo, M√©todo da Renda para avalia√ß√£o de im√≥veis; inspe√ß√£o visual e ensaios espec√≠ficos para v√≠cios construtivos). Justifique brevemente a escolha do m√©todo.
        5. Com base nas suas pesquisas e expertise, detalhar os pontos mais relevantes a serem investigados e um plano estruturado com os principais t√≥picos/se√ß√µes que o laudo final deveria conter.
        Retorne um plano claro e acion√°vel.
        """,
        description="Agente que planeja a estrutura e conte√∫do de um laudo pericial.",
        tools=[Google Search]
    )

# Agente 3: Redator do Laudo
def criar_agente_redator():
    return Agent(
        name="agente_redator_streamlit",
        model=MODEL_ID,
        instruction="""
        Voc√™ √© um Perito Avaliador especialista em engenharia civil e avalia√ß√µes t√©cnicas.
        Sua fun√ß√£o √© elaborar um rascunho de parecer pericial, avalia√ß√£o imobili√°ria ou laudo t√©cnico, fundamentado no plano de per√≠cia fornecido.
        Utilize o tema e os pontos t√©cnicos relevantes do plano para construir um rascunho de relat√≥rio ou laudo que seja claro, preciso e bem fundamentado.
        O conte√∫do deve ser t√©cnico, objetivo e embasado em conceitos de engenharia e, implicitamente, em normas t√©cnicas e legisla√ß√£o (embora voc√™ n√£o precise citar n√∫meros de normas espec√≠ficas, a linguagem e a estrutura devem refletir boas pr√°ticas).
        Evite linguagem excessivamente complexa, mas preserve o rigor cient√≠fico e normativo esperado em um documento t√©cnico.
        Estruture o rascunho com se√ß√µes l√≥gicas baseadas no plano recebido.
        """,
        description="Agente redator de rascunhos de laudos periciais."
        # N√£o necessita de tools se apenas processa texto
    )

# Agente 4: Revisor de Qualidade
def criar_agente_revisor():
    return Agent(
        name="agente_revisor_streamlit",
        model=MODEL_ID,
        instruction="""
        Voc√™ √© um Editor e Revisor T√©cnico meticuloso, especializado em documentos e laudos periciais na √°rea de engenharia civil.
        Considere o p√∫blico t√©cnico (engenheiros, arquitetos) e jur√≠dico (advogados, ju√≠zes) ao revisar. Seu objetivo √© garantir clareza, precis√£o, concis√£o e adequa√ß√£o ao padr√£o normativo e legal vigente (de forma geral, sem precisar verificar normas espec√≠ficas).
        Revise o rascunho do laudo ou parecer abaixo sobre o tema indicado. Verifique:
        - Coer√™ncia t√©cnica e l√≥gica da argumenta√ß√£o.
        - Corre√ß√£o terminol√≥gica e uso adequado de jarg√£o t√©cnico.
        - Clareza e objetividade da linguagem.
        - Formalidade e profissionalismo do texto.
        - Aus√™ncia de ambiguidades ou informa√ß√µes contradit√≥rias.
        Se o documento estiver tecnicamente consistente, claro, bem escrito e pronto para emiss√£o (considerando que √© um rascunho inicial), responda apenas: "O laudo est√° tecnicamente consistente e pronto para emiss√£o."
        Se houver inconsist√™ncias, pontos a melhorar ou sugest√µes, identifique-os claramente e sugira corre√ß√µes t√©cnicas e formais. Seja espec√≠fico em suas recomenda√ß√µes.
        """,
        description="Agente revisor de laudos periciais para garantir qualidade e clareza."
        # N√£o necessita de tools se apenas processa texto
    )


# --- Interface Streamlit ---
st.set_page_config(page_title="Gerador de Laudos Periciais", layout="wide")
st.title("üöÄ Sistema de Cria√ß√£o de Laudos Periciais com IA Generativa üöÄ")
st.caption("Desenvolvido com Google Gemini e ADK")

# Configurar API e cliente
client = configure_google_api() # Garante que o cliente est√° configurado

# Obter data atual
data_de_hoje = date.today().strftime("%d/%m/%Y")
st.sidebar.info(f"Data de Refer√™ncia: {data_de_hoje}")

# Entrada do usu√°rio
topico_laudo = st.text_input("‚ùì Por favor, digite o T√ìPICO sobre o qual voc√™ quer criar o laudo pericial:", placeholder="Ex: Avalia√ß√£o de im√≥vel residencial urbano para fins de garantia")

if st.button("‚ú® Gerar Laudo Pericial ‚ú®", type="primary"):
    if not topico_laudo:
        st.warning("‚ö†Ô∏è Por favor, digite um t√≥pico para o laudo.")
    else:
        st.info(f"üîç Iniciando a cria√ß√£o do laudo sobre: **{topico_laudo}**")

        # Inicializar agentes
        agente_buscador = criar_agente_buscador()
        agente_planejador = criar_agente_planejador()
        agente_redator = criar_agente_redator()
        agente_revisor = criar_agente_revisor()

        with st.spinner("üîÑ **Agente Buscador** est√° pesquisando informa√ß√µes relevantes..."):
            entrada_buscador = f"T√≥pico: {topico_laudo}\nData de hoje para refer√™ncia de atualidade: {data_de_hoje}"
            lancamentos_buscados = call_agent(agente_buscador, entrada_buscador, "buscador")
        with st.expander("üìù **Resultado do Agente 1 (Buscador)**", expanded=False):
            if "Erro ao processar" in lancamentos_buscados:
                st.error(lancamentos_buscados)
            else:
                st.markdown(lancamentos_buscados)
        st.success("‚úÖ Agente Buscador concluiu!")
        st.markdown("---")

        if "Erro ao processar" not in lancamentos_buscados:
            with st.spinner("üîÑ **Agente Planejador** est√° elaborando o plano do laudo..."):
                entrada_planejador = f"T√≥pico do laudo: {topico_laudo}\nInforma√ß√µes e exemplos de laudos buscados: {lancamentos_buscados}"
                plano_de_laudo = call_agent(agente_planejador, entrada_planejador, "planejador")
            with st.expander("üó∫Ô∏è **Resultado do Agente 2 (Planejador)**", expanded=False):
                if "Erro ao processar" in plano_de_laudo:
                    st.error(plano_de_laudo)
                else:
                    st.markdown(plano_de_laudo)
            st.success("‚úÖ Agente Planejador concluiu!")
            st.markdown("---")

            if "Erro ao processar" not in plano_de_laudo:
                with st.spinner("üîÑ **Agente Redator** est√° escrevendo o rascunho do laudo..."):
                    entrada_redator = f"T√≥pico central do laudo: {topico_laudo}\nPlano de per√≠cia detalhado: {plano_de_laudo}"
                    rascunho_de_laudo = call_agent(agente_redator, entrada_redator, "redator")
                with st.expander("‚úçÔ∏è **Resultado do Agente 3 (Redator)**", expanded=False):
                    if "Erro ao processar" in rascunho_de_laudo:
                        st.error(rascunho_de_laudo)
                    else:
                        st.markdown(rascunho_de_laudo)
                st.success("‚úÖ Agente Redator concluiu!")
                st.markdown("---")

                if "Erro ao processar" not in rascunho_de_laudo:
                    with st.spinner("üîÑ **Agente Revisor** est√° analisando a qualidade do rascunho..."):
                        entrada_revisor = f"T√≥pico do laudo: {topico_laudo}\nRascunho do laudo para revis√£o: {rascunho_de_laudo}"
                        laudo_revisado = call_agent(agente_revisor, entrada_revisor, "revisor")
                    with st.expander("üßê **Resultado do Agente 4 (Revisor)**", expanded=True): # Expandido por padr√£o
                        if "Erro ao processar" in laudo_revisado:
                            st.error(laudo_revisado)
                        else:
                            st.markdown(laudo_revisado)
                    st.success("‚úÖ Agente Revisor concluiu!")
                    st.balloons() # Comemora√ß√£o!
                else:
                    st.error("Processo interrompido devido a erro no Agente Redator.")
            else:
                st.error("Processo interrompido devido a erro no Agente Planejador.")
        else:
            st.error("Processo interrompido devido a erro no Agente Buscador.")

st.sidebar.markdown("---")
st.sidebar.header("Sobre este App")
st.sidebar.info(
    "Este aplicativo utiliza um sistema de m√∫ltiplos agentes de IA (Google Gemini + ADK) "
    "para auxiliar na cria√ß√£o de laudos periciais na √°rea de engenharia civil. "
    "Os agentes colaboram em etapas: busca, planejamento, reda√ß√£o e revis√£o."
)
st.sidebar.markdown("---")
st.sidebar.markdown("Desenvolvido como exemplo.")